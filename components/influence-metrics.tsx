"use client"

import { useState,useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import type { InfluenceMetric } from "@/lib/types"
import {
  BarChart3,
  MessageSquare,
  TrendingUp,
  BookOpen,
  Sparkles,
  MessageCircle,
  AlertTriangle,
  Check,
  Info,
} from "lucide-react"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

interface InfluenceMetricsProps {
  metrics: InfluenceMetric[]
}

export default function InfluenceMetrics({ metrics }: InfluenceMetricsProps) {
  const [hoveredMetric, setHoveredMetric] = useState<string | null>(null)

  // Get icon based on metric type
  const getMetricIcon = (type: string) => {
    switch (type) {
      case "sentiment":
        return <MessageSquare className="h-5 w-5" />
      case "quality":
        return <Sparkles className="h-5 w-5" />
      case "credibility":
        return <BookOpen className="h-5 w-5" />
      case "relevance":
        return <TrendingUp className="h-5 w-5" />
      case "appropriateness":
        return (metrics.find((m) => m.type === "appropriateness")?.score as number) >= 50 ? (
          <Check className="h-5 w-5" />
        ) : (
          <AlertTriangle className="h-5 w-5 text-red-500" />
        )
      case "engagement":
        return <MessageCircle className="h-5 w-5" />
      default:
        return <BarChart3 className="h-5 w-5" />
    }
  }
// In the results component, add this when results are fully loaded
useEffect(() => {
  // Dispatch the custom event when results are loaded
  window.dispatchEvent(new Event('resultsLoaded'))
}, [])
  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle className="flex items-center">
          <Sparkles className="h-5 w-5 mr-2 text-purple-500" />
          AI-Generated Metrics
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Info className="h-4 w-4 ml-2 cursor-help text-muted-foreground" />
              </TooltipTrigger>
              <TooltipContent>
                <p className="max-w-xs text-xs">
                  These metrics are generated by our AI based on comprehensive analysis of the creator's content,
                  audience, and online presence.
                </p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="metrics" className="w-full">
          <TabsList className="grid grid-cols-2">
            <TabsTrigger value="metrics">Metrics</TabsTrigger>
            <TabsTrigger value="details">Details</TabsTrigger>
          </TabsList>

          <TabsContent value="metrics" className="space-y-4 pt-4">
            {metrics.map((metric) => (
              <div
                key={metric.type}
                className={`flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 p-2 rounded-md transition-colors ${
                  hoveredMetric === metric.type ? "bg-accent/50" : ""
                }`}
                onMouseEnter={() => setHoveredMetric(metric.type)}
                onMouseLeave={() => setHoveredMetric(null)}
              >
                <div className="flex items-center gap-2">
                  {getMetricIcon(metric.type)}
                  <span className="font-medium">{metric.label}</span>
                </div>
                <div className="flex items-center gap-2 w-full sm:w-auto">
                  <span
                    className={`font-semibold ${
                      metric.score >= 80
                        ? "text-green-500"
                        : metric.score >= 60
                          ? "text-blue-500"
                          : metric.score >= 40
                            ? "text-yellow-500"
                            : "text-red-500"
                    }`}
                  >
                    {metric.score}
                  </span>
                  <div className="w-full sm:w-24 h-2 bg-secondary rounded-full overflow-hidden">
                    <div
                      className={`h-full rounded-full ${
                        metric.score >= 80
                          ? "bg-green-500"
                          : metric.score >= 60
                            ? "bg-blue-500"
                            : metric.score >= 40
                              ? "bg-yellow-500"
                              : "bg-red-500"
                      }`}
                      style={{ width: `${metric.score}%` }}
                    />
                  </div>
                </div>
              </div>
            ))}
          </TabsContent>

          <TabsContent value="details" className="space-y-4 pt-4">
            {metrics.map((metric) => (
              <div
                key={metric.type}
                className={`mb-4 p-3 rounded-md transition-colors ${
                  hoveredMetric === metric.type ? "bg-accent/50" : ""
                }`}
                onMouseEnter={() => setHoveredMetric(metric.type)}
                onMouseLeave={() => setHoveredMetric(null)}
              >
                <div className="flex items-center gap-2 mb-2">
                  {getMetricIcon(metric.type)}
                  <span className="font-medium">{metric.label}</span>
                  <span
                    className={`ml-2 px-2 py-0.5 rounded-full text-xs ${
                      metric.score >= 80
                        ? "bg-green-100 text-green-800"
                        : metric.score >= 60
                          ? "bg-blue-100 text-blue-800"
                          : metric.score >= 40
                            ? "bg-yellow-100 text-yellow-800"
                            : "bg-red-100 text-red-800"
                    }`}
                  >
                    {metric.score}
                  </span>
                </div>
                <p className="text-sm text-muted-foreground">{metric.description}</p>
              </div>
            ))}
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}

